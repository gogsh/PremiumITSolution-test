{"version":3,"sources":["theme/globalStyle.ts","store/bank.ts","store/pocket.ts","store/card.ts","Components/Bank/Screens/CashIn/CashIn-styles.ts","Components/Bank/Screens/CashIn/CashIn.tsx","Components/Bank/Screens/CashOut/CashOut-styles.ts","Components/Bank/Screens/CashOut/CashOut.tsx","Components/Bank/Screens/ChooseAction/ChooseAction.tsx","Components/Bank/Screens/ErrorScreen/ErrorScreen.tsx","Components/Bank/Screens/PinCode/PinCode-style.ts","Components/Bank/Screens/PinCode/PinCode.tsx","Components/Bank/Screens/Success/Success.tsx","Components/Bank/Screens/Waiting/Waiting.tsx","Components/Bank/Bank-style.ts","Components/Bank/Bank.tsx","Components/Card/Card-style.ts","Components/Card/Card.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","status","previousStatus","banknotesFlow","cash","changeStatus","newStatus","cashOut","value","stash","receivedBanknotes","forEach","b","cashIn","banknotes","makeAutoObservable","this","banknote","loadedBanknote","getCashSummary","sum","pinCode","matchPinCode","potentialPin","ButtonsContainer","styled","section","CashOut","observer","onBanknoteLoad","e","preventDefault","bank","target","card","pocket","pocketCash","renderArr","key","push","onClick","disabled","renderButtons","className","CashOutLayout","form","useState","inputValue","setInputValue","type","onInput","placeholder","ChooseAction","ErrorScreen","PinCodeLayout","Alert","span","PinCode","invalidPin","setInvalidPin","maxLength","setTimeout","Success","Waiting","BankLayout","main","Bank","renderScreen","CardContainer","Card","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b653261.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\r\nimport 'normalize.css'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: Roboto;\r\n    font-size: 24px;\r\n    color: background: rgba(0, 0, 0, 0.87);;\r\n  }\r\n\r\n  body {\r\n    height: 90vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background: #F2F2F2;\r\n  }\r\n\r\n  input {\r\n    padding: 10px 20px;\r\n    border: 1px solid #E3E3E3;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    padding: 10px 20px;\r\n    background: #fff;\r\n    border-radius: 4px;\r\n    border: 1px solid #E3E3E3;\r\n    &:hover {\r\n      box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.12);\r\n    }\r\n  }\r\n\r\n  .Button_primary {\r\n    background: #259DCF;\r\n    color: #fff;\r\n    border: none;\r\n  }\r\n\r\n  .Alert_error {\r\n    color: #E64C3C;\r\n  }\r\n\r\n  .Alert_success {\r\n    color: #219653;\r\n  }\r\n\r\n`\r\n\r\nexport default GlobalStyle\r\n","import { makeAutoObservable } from 'mobx'\r\nimport { BankStatus } from '../Types/TBank'\r\nimport { Cash, BanknoteNominals } from '../Types/TCash'\r\n\r\n/** Банкомат */\r\nclass Bank {\r\n  /** Статус интерфейса банкомата */\r\n  status: BankStatus = 'waiting'\r\n\r\n  previousStatus: BankStatus | null = null\r\n\r\n  /** Массив приоритета выдачи банкнот */\r\n  banknotesFlow: BanknoteNominals[] = [5000, 2000, 1000, 500, 200, 100]\r\n\r\n  /** Кол-во банкнот каждого номинала в банкомате */\r\n  cash: Cash = {\r\n    100: 5,\r\n    200: 2,\r\n    500: 8,\r\n    1000: 9,\r\n    2000: 6,\r\n    5000: 4,\r\n  }\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  changeStatus = (newStatus: BankStatus) => {\r\n    this.previousStatus = this.status\r\n    this.status = newStatus\r\n  }\r\n\r\n  /** Вывод средств\r\n   * @returns Выдаваемые пользователю банкноты\r\n   */\r\n  cashOut = (value: number): Cash | null => {\r\n    const stash: Cash = { ...this.cash }\r\n\r\n    /** Объект выдаваемых банкнот */\r\n    const receivedBanknotes: Cash = {}\r\n\r\n    this.banknotesFlow.forEach(b => {\r\n      while (value - b >= 0 && stash[b] !== 0) {\r\n        value = value - b\r\n        stash[b] = stash[b] - 1\r\n        receivedBanknotes[b]\r\n          ? (receivedBanknotes[b] = receivedBanknotes[b] + 1)\r\n          : (receivedBanknotes[b] = 1)\r\n      }\r\n    })\r\n\r\n    if (value === 0) {\r\n      this.status = 'success'\r\n      this.cash = stash\r\n      return receivedBanknotes\r\n    } else {\r\n      this.status = 'error'\r\n      return null\r\n    }\r\n  }\r\n\r\n  /** Ввод средств */\r\n  cashIn = (banknotes: Cash) => {\r\n    for (const b in banknotes) {\r\n      this.cash[b] = this.cash[b] + banknotes[b]\r\n    }\r\n  }\r\n}\r\n\r\nexport default new Bank()\r\n","import { makeAutoObservable } from 'mobx'\r\nimport { Cash, BanknoteNominals } from '../Types/TCash'\r\n\r\n/** Кошелёк клиента */\r\nclass Pocket {\r\n  /** Кол-во банкнот каждого номинала в кошельке клиента */\r\n  cash: Cash = {\r\n    100: 2,\r\n    200: 0,\r\n    500: 0,\r\n    1000: 4,\r\n    2000: 1,\r\n    5000: 0,\r\n  }\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  cashIn = (banknotes: Cash | null) => {\r\n    if (banknotes) {\r\n      for (const b in banknotes) {\r\n        this.cash[b] = this.cash[b] + banknotes[b]\r\n      }\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  cashOut = (banknote: BanknoteNominals): Cash => {\r\n    const loadedBanknote: Cash = {}\r\n    this.cash[banknote] = this.cash[banknote] - 1\r\n    loadedBanknote[banknote] = 1\r\n    return loadedBanknote\r\n  }\r\n\r\n  getCashSummary = () => {\r\n    let sum: number = 0\r\n    for (const b in this.cash) {\r\n      sum = sum + +b * this.cash[b]\r\n    }\r\n    return sum\r\n  }\r\n}\r\n\r\nexport default new Pocket()\r\n","import { makeAutoObservable } from 'mobx'\r\n\r\nclass Card {\r\n  /** Кол-во денег на карте */\r\n  cash: number = 0\r\n  pinCode: number = 1234\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  /** Сравнить пин-код */\r\n  matchPinCode = (potentialPin: number): boolean => {\r\n    return potentialPin === this.pinCode ? true : false\r\n  }\r\n\r\n  cashIn = (value: number) => {\r\n    this.cash = this.cash + value\r\n  }\r\n\r\n  cashOut = (value: number) => {\r\n    this.cash = this.cash - value\r\n  }\r\n}\r\n\r\nexport default new Card()\r\n","import styled from 'styled-components'\r\n\r\nexport const ButtonsContainer = styled.section`\r\n  display: grid;\r\n  grid-template-columns: 100px 100px;\r\n  gap: 1rem;\r\n`\r\n","import React from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nimport { Cash } from '../../../../Types/TCash'\r\n\r\nimport bank from '../../../../store/bank'\r\nimport pocket from '../../../../store/pocket'\r\nimport card from '../../../../store/card'\r\n\r\nimport { ButtonsContainer } from './CashIn-styles'\r\n\r\nconst CashOut: React.FC = observer(() => {\r\n  const onCashIn = (e: React.ChangeEvent<any>) => {\r\n    e.preventDefault()\r\n    bank.changeStatus('success')\r\n  }\r\n\r\n  const onBanknoteLoad = (e: React.ChangeEvent<any>) => {\r\n    e.preventDefault()\r\n    bank.cashIn({ [e.target.value]: 1 })\r\n    card.cashIn(+e.target.value)\r\n    pocket.cashOut(e.target.value)\r\n  }\r\n\r\n  const renderButtons = (pocketCash: Cash): JSX.Element[] => {\r\n    const renderArr = []\r\n    for (const key in pocketCash) {\r\n      if (pocketCash[key] !== 0) {\r\n        renderArr.push(\r\n          <button value={key} key={key} onClick={onBanknoteLoad}>\r\n            {key}\r\n          </button>,\r\n        )\r\n      } else {\r\n        renderArr.push(\r\n          <button disabled={true} key={key}>\r\n            {key}\r\n          </button>,\r\n        )\r\n      }\r\n    }\r\n    return renderArr\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ButtonsContainer>{renderButtons(pocket.cash)}</ButtonsContainer>\r\n      <button className={'Button_primary'} onClick={onCashIn}>\r\n        Подтвердить\r\n      </button>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default CashOut\r\n","import styled from 'styled-components'\r\n\r\nexport const CashOutLayout = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n`\r\n","import React, { useState } from 'react'\r\n\r\nimport bank from '../../../../store/bank'\r\nimport pocket from '../../../../store/pocket'\r\nimport card from '../../../../store/card'\r\n\r\nimport { CashOutLayout } from './CashOut-styles'\r\n\r\nconst CashOut: React.FC = () => {\r\n  const [inputValue, setInputValue] = useState<number | ''>('')\r\n\r\n  const onInputChange = (e: React.ChangeEvent<any>) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const onCashOut = (e: React.ChangeEvent<any>) => {\r\n    e.preventDefault()\r\n    if (card.cash < inputValue) {\r\n      bank.changeStatus('error')\r\n    } else if (+inputValue) {\r\n      const status = pocket.cashIn(bank.cashOut(+inputValue))\r\n      if (status) {\r\n        card.cashOut(+inputValue)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CashOutLayout>\r\n      <input\r\n        type='number'\r\n        onInput={onInputChange}\r\n        value={inputValue}\r\n        placeholder={'Введите сумму'}\r\n      />\r\n      <button className={'Button_primary'} onClick={onCashOut} value={inputValue}>\r\n        Получить наличные\r\n      </button>\r\n    </CashOutLayout>\r\n  )\r\n}\r\n\r\nexport default CashOut\r\n","import bank from '../../../../store/bank'\r\n\r\nconst ChooseAction: React.FC = () => {\r\n  const cashInHandler = () => {\r\n    bank.changeStatus('cash-in')\r\n  }\r\n\r\n  const cashOutHandler = () => {\r\n    bank.changeStatus('cash-out')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button onClick={cashInHandler}>Внести наличные</button>\r\n      <button onClick={cashOutHandler}>Снять наличные</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChooseAction\r\n","import bank from '../../../../store/bank'\r\n\r\nconst ErrorScreen: React.FC = () => {\r\n  const anotherAmountHandler = () => {\r\n    bank.previousStatus === 'cash-in'\r\n      ? bank.changeStatus('cash-in')\r\n      : bank.changeStatus('cash-out')\r\n  }\r\n\r\n  const cardOutHandler = () => {\r\n    bank.changeStatus('waiting')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2 className={'Alert_error'}>Операция не может быть выполнена</h2>\r\n      <button onClick={anotherAmountHandler}>Внести другую сумму</button>\r\n      <button onClick={cardOutHandler}>Вернуть карту</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ErrorScreen\r\n","import styled from 'styled-components'\r\n\r\nexport const PinCodeLayout = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n`\r\n\r\nexport const Alert = styled.span`\r\n  position: absolute;\r\n  top: 12rem;\r\n  color: #e64c3c;\r\n`\r\n","import React, { useState } from 'react'\r\n\r\nimport bank from '../../../../store/bank'\r\nimport card from '../../../../store/card'\r\n\r\nimport { PinCodeLayout, Alert } from './PinCode-style'\r\n\r\nconst PinCode: React.FC = () => {\r\n  const [inputValue, setInputValue] = useState<number | ''>('')\r\n  const [invalidPin, setInvalidPin] = useState<boolean>(false)\r\n\r\n  const onInputChange = (e: React.ChangeEvent<any>) => {\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const pinCodeHandler = (e: React.ChangeEvent<any>) => {\r\n    e.preventDefault()\r\n\r\n    if (card.matchPinCode(+e.target.value)) {\r\n      bank.changeStatus('choose-action')\r\n    } else {\r\n      setInvalidPin(true)\r\n      setTimeout(() => {\r\n        setInvalidPin(false)\r\n      }, 2000)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {invalidPin ? <Alert>Неверный пин-код</Alert> : null}\r\n      <PinCodeLayout>\r\n        <input\r\n          onInput={onInputChange}\r\n          value={inputValue}\r\n          placeholder={'Введите пин-код'}\r\n          maxLength={4}\r\n        />\r\n        <button onClick={pinCodeHandler} value={inputValue}>\r\n          Подтвердить\r\n        </button>\r\n      </PinCodeLayout>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PinCode\r\n","import bank from '../../../../store/bank'\r\n\r\nconst Success: React.FC = () => {\r\n  const onCardEnterHandler = () => {\r\n    bank.changeStatus('waiting')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2 className={'Alert_success'}>Операция успешно завершена</h2>\r\n      <button onClick={onCardEnterHandler}>Вернуть карту</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Success\r\n","import bank from '../../../../store/bank'\r\n\r\nconst Waiting: React.FC = () => {\r\n  const onCardEnterHandler = () => {\r\n    bank.changeStatus('pin-code')\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button onClick={onCardEnterHandler}>Вставить карту</button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Waiting\r\n","import styled from 'styled-components'\r\n\r\nexport const BankLayout = styled.main`\r\n  width: 700px;\r\n  height: 700px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n\r\n  background: #ffffff;\r\n  border: 1px solid #e3e3e3;\r\n  box-sizing: border-box;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.05);\r\n`\r\n","import { BankStatus } from '../../Types/TBank'\r\n\r\nimport { observer } from 'mobx-react-lite'\r\nimport bank from '../../store/bank'\r\n\r\nimport * as Screen from './Screens/index'\r\n\r\nimport { BankLayout } from './Bank-style'\r\n\r\nconst Bank: React.FC = observer(() => {\r\n  const renderScreen = (status: BankStatus) => {\r\n    switch (status) {\r\n      case 'waiting':\r\n        return <Screen.Waiting />\r\n      case 'pin-code':\r\n        return <Screen.PinCode />\r\n      case 'choose-action':\r\n        return <Screen.ChooseAction />\r\n      case 'cash-in':\r\n        return <Screen.CashIn />\r\n      case 'cash-out':\r\n        return <Screen.CashOut />\r\n      case 'error':\r\n        return <Screen.ErrorScreen />\r\n      case 'success':\r\n        return <Screen.Success />\r\n    }\r\n  }\r\n\r\n  return <BankLayout>{renderScreen(bank.status)}</BankLayout>\r\n})\r\n\r\nexport default Bank\r\n","import styled from 'styled-components'\r\n\r\nexport const CardContainer = styled.section`\r\n  position: absolute;\r\n  right: 150px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  line-height: 180%;\r\n  background: #fff;\r\n  padding: 1rem 2rem;\r\n\r\n  border: 1px solid #e3e3e3;\r\n  box-sizing: border-box;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.05);\r\n`\r\n","import { observer } from 'mobx-react-lite'\r\nimport card from '../../store/card'\r\n\r\nimport { CardContainer } from './Card-style'\r\n\r\nconst Card: React.FC = observer(() => {\r\n  return (\r\n    <CardContainer>\r\n      <strong>Карта клиента</strong>\r\n      <span>Баланс: {card.cash}</span>\r\n      <span>Пин-код: {card.pinCode}</span>\r\n    </CardContainer>\r\n  )\r\n})\r\n\r\nexport default Card\r\n","import { observer } from 'mobx-react-lite'\nimport GlobalStyle from './theme/globalStyle'\n\nimport Bank from './Components/Bank/Bank'\nimport Card from './Components/Card/Card'\n\nconst App: React.FC = observer(() => {\n  return (\n    <>\n      <GlobalStyle />\n      <div className='App'>\n        <Card />\n        <Bank />\n      </div>\n    </>\n  )\n})\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}